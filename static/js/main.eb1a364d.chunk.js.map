{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Status.ts","components/TodoModal/TodoModal.tsx","service/getFilteredTodo.ts","App.tsx","index.tsx"],"names":["TodoList","todoList","selectedTodoItem","setSelectedTodoItem","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","searchQuery","setSearchQuery","selectedStatus","setSelectedStatus","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","TodoModal","useState","modalLoading","setModalLoading","selectedUser","setSelectedUser","useEffect","userId","finally","href","email","name","App","query","status","setTodoList","isLoading","setLoading","All","filteredTodos","filter","titleMatch","toLowerCase","includes","Active","Completed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb1a364d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todoList: Todo[];\n  selectedTodoItem: Todo | null;\n  setSelectedTodoItem: (selectedTodoItem: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todoList,\n  selectedTodoItem,\n  setSelectedTodoItem,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todoList.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames({\n              'has-background-info-light': selectedTodoItem === todo,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodoItem(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    {\n                      'far fa-eye-slash': selectedTodoItem === todo,\n                      'far fa-eye': selectedTodoItem !== todo,\n                    },\n                  )}\n                  />\n\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  searchQuery: string;\n  setSearchQuery: (searchQuery: string) => void;\n  selectedStatus: Status;\n  setSelectedStatus: (selectedStatus: Status) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  searchQuery,\n  setSearchQuery,\n  selectedStatus,\n  setSelectedStatus,\n}) => {\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleQueryReset = () => setSearchQuery('');\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedStatus}\n            onChange={event => setSelectedStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryReset}\n            />\n\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodoItem: Todo;\n  setSelectedTodoItem: (selectedTodo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodoItem,\n  setSelectedTodoItem,\n}) => {\n  const [modalLoading, setModalLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    setModalLoading(true);\n\n    getUser(selectedTodoItem.userId)\n      .then(setSelectedUser)\n      .finally(() => {\n        setModalLoading(false);\n      });\n  }, [selectedTodoItem.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {modalLoading && (\n        <Loader />\n      )}\n\n      {!modalLoading && selectedUser && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodoItem.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodoItem(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodoItem.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodoItem.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n): Todo[] => {\n  return todos.filter(todo => {\n    const titleMatch = todo.title.toLowerCase().includes(query.toLowerCase());\n\n    switch (status) {\n      case Status.All:\n        return titleMatch;\n      case Status.Active:\n        return titleMatch && !todo.completed;\n      case Status.Completed:\n        return titleMatch && todo.completed;\n      default:\n        return titleMatch;\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Status } from './types/Status';\nimport { filterTodos } from './service/getFilteredTodo';\n\nexport const App: React.FC = () => {\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setLoading] = useState(false);\n  const [selectedStatus, setSelectedStatus] = useState<Status>(Status.All);\n  const [selectedTodoItem, setSelectedTodoItem] = useState<Todo | null>(null);\n\n  const filteredTodos = filterTodos(todoList, searchQuery, selectedStatus);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodoList)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                selectedStatus={selectedStatus}\n                setSelectedStatus={setSelectedStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!isLoading && (\n                <TodoList\n                  todoList={filteredTodos}\n                  selectedTodoItem={selectedTodoItem}\n                  setSelectedTodoItem={setSelectedTodoItem}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoItem && (\n        <TodoModal\n          selectedTodoItem={selectedTodoItem}\n          setSelectedTodoItem={setSelectedTodoItem}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}